parameters:
    graviton_audit_tracking:
        # General on/off switch
        log_enabled: true
        # Localhost and not Real User on/off switch
        log_test_calls: false
        # Store request log also on 400 error
        log_on_failure: false
        # Request methods to be saved, array PUT,POST,DELETE,PATCH...
        requests: []
        # Store full request header request data.
        request_headers: false
        # Store full request content body. if true full lenght, can be limited with a integer
        request_content: false
        # Store reponse basic information. if true full lenght, can be limited with a integer
        response: false
        # Store full response header request data.
        response_headers: false
        # Store response body content
        response_content: false
        # Store data base events, array of events, insert, update, delete
        database: ['insert','update','delete']
        # Store all exception
        exceptions: false
        # Exclude header status exceptions code, 400=bad request, form validation
        exceptions_exclude: [400]
        # Exclude listed URLS, array
        exclude_urls: ["/auditing", "/event/"]

services:
    graviton.audit.controller.default:
        class: Graviton\AuditTrackingBundle\Controller\DefaultController
        parent: graviton.rest.controller
        tags:
            - { name: graviton.rest, collection: AuditTracking, read-only: true, router-base: /auditing }
        calls:
            - [setModel, ['@gravitondyn.audittracking.model.audittracking']]

    # Activity Manager to keep all in one place
    graviton.audit.manager.activity:
        class: Graviton\AuditTrackingBundle\Manager\ActivityManager
        arguments:
            - '@request_stack'
            - '@gravitondyn.audittracking.repository.audittracking'
        calls:
            - [setConfiguration, ["%graviton_audit_tracking%"]]

    # Store Manager to save all events into DB
    graviton.audit.store.activity:
        class: Graviton\AuditTrackingBundle\Manager\StoreManager
        arguments:
            - '@request_stack'
            - '@graviton.audit.manager.activity'
            - '@monolog.logger'
            - '@doctrine_mongodb'
            - '@graviton.security.service.utils'
            - "@router"
        tags:
            - { name: kernel.event_listener, event: kernel.response, method: persistEvents, priority: -2 }

    # Listeners
    graviton.audit.listener.request:
        class: Graviton\AuditTrackingBundle\Listener\RequestActivityListener
        arguments:
            - '@graviton.audit.manager.activity'
        tags:
            - { name: kernel.event_listener, event: kernel.request, method: onKernelRequest, priority: 201 }

    graviton.audit.listener.db:
        class: Graviton\AuditTrackingBundle\Listener\DocumentModelListener
        arguments:
            - '@graviton.audit.manager.activity'
        tags:
            - { name: kernel.event_listener, event: document.model.event.insert, method: modelInsert }
            - { name: kernel.event_listener, event: document.model.event.update, method: modelUpdate }
            - { name: kernel.event_listener, event: document.model.event.delete, method: modelDelete }

    graviton.audit.listener.response:
        class: Graviton\AuditTrackingBundle\Listener\ResponseActivityListener
        arguments:
            - '@graviton.audit.manager.activity'
        tags:
            - { name: kernel.event_listener, event: kernel.response, method: onKernelResponse, priority: -1 }

    graviton.audit.listener.exception:
        class: Graviton\AuditTrackingBundle\Listener\ExceptionActivityListener
        arguments:
            - '@graviton.audit.manager.activity'
        tags:
            - { name: kernel.event_listener, event: kernel.exception, method: onKernelException, priority: 1 }
